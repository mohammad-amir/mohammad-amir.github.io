{"version":3,"sources":["assets/images/main-banner.jpg","assets/images/profilpic.png","component/page-body.js","component/page-header.js","component/page-footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PageBody","props","className","React","Component","SideBar","ContentPanel","PageHeader","state","name","position","n","p","setTimeout","this","setDisplayValues","bind","displayName","substr","length","displayPosition","setState","componentDidMount","src","mainBanner","profilePic","alt","BlinkBar","PageFooter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,kMCEtBC,E,YACjB,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,yBAAKC,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATsBC,IAAMC,WAetCC,EAAU,kBACZ,yBAAKH,UAAU,kBAKbI,EAAe,kBACjB,yBAAKJ,UAAU,kB,0QCpBEK,E,YACjB,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTC,KAAM,gBACNC,SAAU,6BACVC,EAAG,EACHC,EAAG,GAPQ,E,iFAYfC,WAAWC,KAAKC,iBAAiBC,KAAKF,MAAO,O,yCAG7B,IAAD,SACeA,KAAKN,MAA7BC,EADS,EACTA,KAAMC,EADG,EACHA,SAAUC,EADP,EACOA,EAAGC,EADV,EACUA,EACzBD,IACAC,GAAQ,EAER,IAAIK,EAAcR,EAAKS,OAAO,EAAEP,GAAKF,EAAKU,OAAS,IAC/CC,EAAkBV,EAASQ,OAAO,EAAEN,GAAKF,EAASS,OAAS,IAE/DL,KAAKO,S,yWAAL,IAAkB,CAACJ,cAAaG,kBAAiBT,IAAGC,OAAK,kBAAM,EAAKU,yB,+BAG9D,IAAD,EACkDR,KAAKN,MAArDC,EADF,EACEA,KAAMC,EADR,EACQA,SAAUO,EADlB,EACkBA,YAAaG,EAD/B,EAC+BA,gBAEpC,OACI,6BACI,yBAAKlB,UAAU,eACX,yBAAKqB,IAAKC,IAAYtB,UAAU,uBAEpC,yBAAKA,UAAU,aACX,0BAAMA,UAAU,eACZ,yBAAKqB,IAAKE,IAAYC,IAAKhB,EAAW,MAAQD,KAElD,uBAAGP,UAAU,QAAb,eAAgC,8BAAOe,GAAmB,kBAAC,EAAD,OAC1D,uBAAGf,UAAU,YAAb,UAA+B,8BAAOkB,GAAuB,kBAAC,EAAD,OAC7D,uBAAGlB,UAAU,iBAAb,oBAAkD,uBAAGA,UAAU,8B,GAzC3CC,IAAMC,WAgDxCuB,EAAW,kBAAM,0BAAMzB,UAAU,aAAhB,MClDF0B,E,YACjB,WAAY3B,GAAQ,qEACVA,I,sEAIN,OACI,yBAAKC,UAAU,eAAf,6C,GAP6BC,IAAMC,WCchCyB,MAVf,WACE,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.220ea9ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-banner.18672732.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profilpic.2bedc3da.png\";","import React from \"react\";\n\nexport default class PageBody extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-body\">\n                <SideBar/>\n                <ContentPanel/>\n            </div>\n        )\n    }\n}\n\nconst SideBar = () =>\n    <div className=\"page-sidebar\">\n\n    </div>\n;\n\nconst ContentPanel = () =>\n    <div className=\"page-content\">\n\n    </div>\n;","import React from \"react\";\nimport mainBanner from \"../assets/images/main-banner.jpg\";\nimport profilePic from \"../assets/images/profilpic.png\";\n\nexport default class PageHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: \"Mohammad Amir\",\n            position: \"Lead Full Stack Developer \",\n            n: 0,\n            p: 0\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(this.setDisplayValues.bind(this), 500);\n    }\n\n    setDisplayValues() {\n        let { name, position, n, p} = this.state;\n        n++;\n        p = p + 2;\n\n        let displayName = name.substr(0,n % (name.length + 1));\n        let displayPosition = position.substr(0,p % (position.length + 2));\n\n        this.setState({...{displayName, displayPosition, n, p}}, () => this.componentDidMount());\n    }\n\n    render() {\n        const {name, position, displayName, displayPosition} = this.state;\n\n        return (\n            <div>\n                <div className=\"main banner\">\n                    <img src={mainBanner} className=\"main-banner-image\"/>\n                </div>\n                <div className=\"main info\">\n                    <span className=\"profile-pic\">\n                        <img src={profilePic} alt={position + \" - \" + name}/>\n                    </span>\n                    <p className=\"name\">Hello, I am <span>{displayName}</span><BlinkBar/></p>\n                    <p className=\"position\">I am a <span>{displayPosition}</span><BlinkBar/></p>\n                    <a className=\"about-me-link\">About me &nbsp;&nbsp;<i className=\"fas fa-angle-right\"/></a>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst BlinkBar = () => <span className=\"blink-bar\">|</span>\n","import React from \"react\";\n\nexport default class PageFooter  extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-footer\">\n                Design and Developed by Mohammad Amir\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './assets/styles/App.scss';\nimport PageBody from \"./component/page-body\";\nimport PageHeader from \"./component/page-header\";\nimport PageFooter from \"./component/page-footer\";\n\nfunction App() {\n  return (\n      <div>\n          <PageHeader/>\n          <PageBody/>\n          <PageFooter/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}