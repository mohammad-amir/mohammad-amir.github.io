{"version":3,"sources":["component/page-body.js","component/page-footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","profileJson","displayPosition","id","className","data-stellar-vertical-offset","data-stellar-background-ratio","name","position","intro","map","text","socialLinks","socialLink","href","url","target","iconClass","PageBody","props","PageFooter","App","state","p","this","getProfileData","fetch","then","result","json","setState","setDisplayValues","f","length","substr","setTimeout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAEaA,G,MAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,EAAeC,gBAAf,OAChB,6BAASC,GAAG,OAAOC,UAAU,gBAAgBC,+BAA6B,KAAKC,gCAA8B,OACzG,yBAAKF,UAAU,SACX,4BAAI,8BAAOH,EAAYM,MAAY,6BAAMN,EAAYO,UACrD,2BAEQP,EAAYQ,MAAQR,EAAYQ,MAAMC,KAAI,SAAAC,GAAI,OAAI,8BAAOA,EAAK,iCAAgB,MAGtF,yBAAKP,UAAU,gBACX,wBAAIA,UAAU,eAENH,EAAYW,YAAcX,EAAYW,YAAYF,KAAI,SAAAG,GAAU,OAC5D,4BAAI,uBAAGC,KAAMD,EAAWE,IAAKC,OAAO,UAAS,uBAAGZ,UAAWS,EAAWI,iBACtE,QAKpB,yBAAKb,UAAU,cAAa,yBAAKA,UAAU,cAKtCc,EAAW,SAACC,GAAD,OACpB,yBAAKf,UAAU,eCzBNgB,EAAa,SAAC,GAAD,IAAEnB,EAAF,EAAEA,YAAF,OACtB,4BAAQG,UAAU,kBACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,yBACX,sDAA4BH,EAAYM,KAAxC,MAAiDN,EAAYO,gBCoCtEa,E,YAtCX,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KAEDG,MAAQ,CACTC,EAAG,EACHtB,YAAa,IALF,E,iFAUfuB,KAAKC,mB,uCAGS,IAAD,OACbC,MAAM,qGACDC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAA1B,GAAW,OAAI,EAAK6B,SAAS,CAAC7B,gBAAc,kBAAM,EAAK8B,2B,yCAGjD,IAAD,SACWP,KAAKF,MAA1BrB,EADU,EACVA,YAAasB,EADH,EACGA,EAAGS,EADN,EACMA,EAErBT,GADAS,EAAW,IAANT,EAAW,EAAKA,IAAMtB,EAAYO,SAASyB,QAAW,EAAID,EAE/D,IAAI9B,EAAkBD,EAAYO,SAAS0B,OAAO,EAAGX,GACrDC,KAAKM,SAAS,CAAC5B,kBAAiBqB,IAAGS,MAAI,kBAAMG,YAAW,kBAAM,EAAKJ,qBAAoB,U,+BAIvF,OACI,6BACI,kBAAC,EAASP,KAAKF,OACf,kBAAC,EAAaE,KAAKF,OACnB,kBAAC,EAAeE,KAAKF,Y,GAjCnBc,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.54e7efab.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Home = ({profileJson, displayPosition}) =>\n    <section id=\"home\" className=\"tt-fullHeight\" data-stellar-vertical-offset=\"50\" data-stellar-background-ratio=\"0.8\">\n        <div className=\"intro\">\n            <h1><span>{profileJson.name}</span><br/>{profileJson.position}</h1>\n            <p>\n                {\n                    profileJson.intro ? profileJson.intro.map(text => <span>{text}<br/></span>) : null\n                }\n            </p>\n            <div className=\"social-icons\">\n                <ul className=\"list-inline\">\n                    {\n                        profileJson.socialLinks ? profileJson.socialLinks.map(socialLink =>\n                            <li><a href={socialLink.url} target=\"_blank\"><i className={socialLink.iconClass}/></a></li>\n                        ) : null\n                    }\n                </ul>\n            </div>\n        </div>\n        <div className=\"mouse-icon\"><div className=\"wheel\"/></div>\n    </section>\n;\n\n\nexport const PageBody = (props) =>\n    <div className=\"page-body\">\n\n    </div>\n;\n\nconst Blink = ({children}) => <span className=\"blink\">{children}</span>;\n","import React from \"react\";\n\nexport const PageFooter = ({profileJson}) =>\n    <footer className=\"footer-wrapper\">\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"copyright text-center\">\n                        <p>Design and Developed by {profileJson.name} - {profileJson.position}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </footer>\n;","import React from 'react';\nimport './assets/scss/App.scss';\nimport {Home, PageBody} from \"./component/page-body\";\nimport {PageFooter} from \"./component/page-footer\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            p: 1,\n            profileJson: {}\n        };\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    getProfileData() {\n        fetch('https://raw.githubusercontent.com/mohammad-amir/mohammad-amir.github.io/ProfileDataServer/db.json')\n            .then(result => result.json())\n            .then(profileJson => this.setState({profileJson}, () => this.setDisplayValues()));\n    }\n\n    setDisplayValues() {\n        let {profileJson, p, f} = this.state;\n        f = (p === 1) ? 1 : (p === profileJson.position.length) ? -1 : f;\n        p += f;\n        let displayPosition = profileJson.position.substr(0, p);\n        this.setState({displayPosition, p, f}, () => setTimeout(() => this.setDisplayValues(), 100));\n    }\n\n    render() {\n        return (\n            <div>\n                <Home {...this.state}/>\n                <PageBody {...this.state}/>\n                <PageFooter {...this.state}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}