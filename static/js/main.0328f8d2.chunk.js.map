{"version":3,"sources":["assets/images/banner2.jpg","assets/images/profilpic.png","component/page-body.js","component/page-header.js","component/page-footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PageBody","props","className","SideBar","ContentPanel","PageHeader","profileJson","displayPosition","src","mainBanner","profilePic","alt","name","Blink","children","PageFooter","position","App","state","p","this","getProfileData","fetch","then","result","json","setState","setDisplayValues","f","length","substr","setTimeout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,8LCE9BC,G,MAAW,SAACC,GAAD,OACpB,yBAAKC,UAAU,aACX,kBAAC,EAAYD,GACb,kBAAC,EAAiBA,MAIpBE,EAAU,kBACZ,yBAAKD,UAAU,kBAKbE,EAAe,kBACjB,yBAAKF,UAAU,kB,gCCZNG,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,gBAAf,OACtB,6BACI,yBAAKL,UAAU,eACX,yBAAKM,IAAKC,IAAYP,UAAU,uBAEpC,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iCACH,0BAAMA,UAAU,eACZ,yBAAKM,IAAKE,IAAYC,IAAKJ,EAAkB,MAAQD,EAAYM,QAE7E,uBAAGV,UAAU,QAAb,qBAAsC,8BAAOI,EAAYM,OACzD,uBAAGV,UAAU,YAAb,UAA+B,8BAAOK,GAAuB,kBAAC,EAAD,WAC7D,uBAAGL,UAAU,QAAb,YAA6B,uBAAGA,UAAU,4BAOpDW,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAAgB,0BAAMZ,UAAU,SAASY,ICrB1CC,EAAa,SAAC,GAAD,IAAET,EAAF,EAAEA,YAAF,OACtB,yBAAKJ,UAAU,eAAf,2BAC6BI,EAAYM,KADzC,MACkDN,EAAYU,WCyCnDC,E,YAtCX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KAEDiB,MAAQ,CACTC,EAAG,EACHb,YAAa,IALF,E,iFAUfc,KAAKC,mB,uCAGS,IAAD,OACbC,MAAM,qGACDC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAjB,GAAW,OAAI,EAAKoB,SAAS,CAACpB,gBAAc,kBAAM,EAAKqB,2B,yCAGjD,IAAD,SACWP,KAAKF,MAA1BZ,EADU,EACVA,YAAaa,EADH,EACGA,EAAGS,EADN,EACMA,EAErBT,GADAS,EAAW,IAANT,EAAW,EAAKA,IAAMb,EAAYU,SAASa,QAAW,EAAID,EAE/D,IAAIrB,EAAkBD,EAAYU,SAASc,OAAO,EAAGX,GACrDC,KAAKM,SAAS,CAACnB,kBAAiBY,IAAGS,MAAI,kBAAMG,YAAW,kBAAM,EAAKJ,qBAAoB,U,+BAIvF,OACI,6BACI,kBAAC,EAAeP,KAAKF,OACrB,kBAAC,EAAaE,KAAKF,OACnB,kBAAC,EAAeE,KAAKF,Y,GAjCnBc,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.0328f8d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner2.cef07566.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profilpic.2bedc3da.png\";","import React from \"react\";\n\nexport const PageBody = (props) =>\n    <div className=\"page-body\">\n        <SideBar {...props}/>\n        <ContentPanel {...props}/>\n    </div>\n;\n\nconst SideBar = () =>\n    <div className=\"page-sidebar\">\n\n    </div>\n;\n\nconst ContentPanel = () =>\n    <div className=\"page-content\">\n\n    </div>\n;","import React from \"react\";\nimport mainBanner from \"../assets/images/banner2.jpg\";\nimport profilePic from \"../assets/images/profilpic.png\";\n\nexport const PageHeader = ({profileJson, displayPosition}) =>\n    <div>\n        <div className=\"main banner\">\n            <img src={mainBanner} className=\"main-banner-image\"/>\n        </div>\n        <div className=\"main info\">\n            <div className=\"vertically-centered-container\">\n                        <span className=\"profile-pic\">\n                            <img src={profilePic} alt={displayPosition + \" - \" + profileJson.name}/>\n                        </span>\n                <p className=\"name\">Hello, My name is <span>{profileJson.name}</span></p>\n                <p className=\"position\">I am a <span>{displayPosition}</span><Blink>_</Blink></p>\n                <a className=\"link\">About Me <i className=\"fas fa-angle-right\"/></a>\n                {/*<a className=\"link\" href={RESUME_URL}>Resume <i className=\"fas fa-arrow-circle-down\"/></a>*/}\n            </div>\n        </div>\n    </div>\n;\n\nconst Blink = ({children}) => <span className=\"blink\">{children}</span>;\n","import React from \"react\";\n\nexport const PageFooter = ({profileJson}) =>\n    <div className=\"page-footer\">\n        Design and Developed by {profileJson.name} - {profileJson.position}\n    </div>\n;","import React from 'react';\nimport './assets/styles/App.scss';\nimport {PageBody} from \"./component/page-body\";\nimport {PageHeader} from \"./component/page-header\";\nimport {PageFooter} from \"./component/page-footer\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            p: 0,\n            profileJson: {}\n        };\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    getProfileData() {\n        fetch('https://raw.githubusercontent.com/mohammad-amir/mohammad-amir.github.io/ProfileDataServer/db.json')\n            .then(result => result.json())\n            .then(profileJson => this.setState({profileJson}, () => this.setDisplayValues()));\n    }\n\n    setDisplayValues() {\n        let {profileJson, p, f} = this.state;\n        f = (p === 0) ? 1 : (p === profileJson.position.length) ? -1 : f;\n        p += f;\n        let displayPosition = profileJson.position.substr(0, p);\n        this.setState({displayPosition, p, f}, () => setTimeout(() => this.setDisplayValues(), 100));\n    }\n\n    render() {\n        return (\n            <div>\n                <PageHeader {...this.state}/>\n                <PageBody {...this.state}/>\n                <PageFooter {...this.state}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}